version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: rag-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - rag-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: rag-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # 자동 토픽 생성 허용
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7.2-alpine
    hostname: redis
    container_name: rag-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ragpassword
    volumes:
      - redis-data:/data
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "ragpassword", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OpenSearch (single node for development)
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    hostname: opensearch
    container_name: rag-opensearch
    environment:
      - cluster.name=rag-opensearch-cluster
      - node.name=rag-opensearch-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
      - "DISABLE_INSTALL_DEMO_CONFIG=true"
      - "DISABLE_SECURITY_PLUGIN=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OpenSearch Dashboards
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.0
    hostname: opensearch-dashboards
    container_name: rag-opensearch-dashboards
    ports:
      - "5601:5601"
    environment:
      OPENSEARCH_HOSTS: '["http://opensearch:9200"]'
      DISABLE_SECURITY_DASHBOARDS_PLUGIN: 'true'
    networks:
      - rag-network
    depends_on:
      - opensearch

  # MinIO (S3 compatible storage)
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    hostname: minio
    container_name: rag-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for metadata
  postgres:
    image: postgres:16-alpine
    hostname: postgres
    container_name: rag-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: rag_metadata
      POSTGRES_USER: raguser
      POSTGRES_PASSWORD: ragpassword
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U raguser -d rag_metadata"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: rag-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: rag-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    networks:
      - rag-network

  # Text Extraction Service
  text-extraction:
    build:
      context: ./services/text-extraction
      dockerfile: Dockerfile
    hostname: text-extraction
    container_name: rag-text-extraction
    ports:
      - "8081:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_ENDPOINT: redis
      REDIS_PORT: 6379
      SERVICE_NAME: text-extraction-service
      LOG_LEVEL: DEBUG
      ENVIRONMENT: development
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rag-network
    volumes:
      - ./shared:/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Embedding Generator Service
  embedding-generator:
    build:
      context: ./services/embedding-generator
      dockerfile: Dockerfile
    hostname: embedding-generator
    container_name: rag-embedding-generator
    ports:
      - "8082:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_ENDPOINT: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ragpassword
      AWS_REGION: us-east-1
      EMBEDDING_MODEL: amazon.titan-embed-text-v1
      SERVICE_NAME: embedding-generator-service
      LOG_LEVEL: DEBUG
      ENVIRONMENT: development
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rag-network
    volumes:
      - ./shared:/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Indexing Service
  indexing-service:
    build:
      context: ./services/indexing-service
      dockerfile: Dockerfile
    hostname: indexing-service
    container_name: rag-indexing-service
    ports:
      - "8083:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      OPENSEARCH_ENDPOINT: http://opensearch:9200
      OPENSEARCH_INDEX: enterprise-rag
      REDIS_ENDPOINT: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ragpassword
      SERVICE_NAME: indexing-service
      LOG_LEVEL: DEBUG
      ENVIRONMENT: development
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    networks:
      - rag-network
    volumes:
      - ./shared:/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Search API Service
  search-api:
    build:
      context: ./services/search-api
      dockerfile: Dockerfile
    hostname: search-api
    container_name: rag-search-api
    ports:
      - "8084:8080"
    environment:
      OPENSEARCH_ENDPOINT: http://opensearch:9200
      OPENSEARCH_INDEX: enterprise-rag
      REDIS_ENDPOINT: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ragpassword
      AWS_REGION: us-east-1
      EMBEDDING_MODEL: amazon.titan-embed-text-v1
      SERVICE_NAME: search-api-service
      LOG_LEVEL: DEBUG
      ENVIRONMENT: development
    depends_on:
      redis:
        condition: service_healthy
      opensearch:
        condition: service_healthy
    networks:
      - rag-network
    volumes:
      - ./shared:/app/shared
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  redis-data:
  opensearch-data:
  minio-data:
  postgres-data:

networks:
  rag-network:
    driver: bridge
    name: rag-network
