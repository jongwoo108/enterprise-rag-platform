apiVersion: apps/v1
kind: Deployment
metadata:
  name: indexing-service
  namespace: enterprise-rag
  labels:
    app: indexing-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: indexing-service
  template:
    metadata:
      labels:
        app: indexing-service
    spec:
      containers:
      - name: indexing-service
        image: enterprise-rag-platform/indexing-service:latest
        ports:
        - containerPort: 8080
        env:
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: KAFKA_BOOTSTRAP_SERVERS
        - name: OPENSEARCH_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: OPENSEARCH_ENDPOINT
        - name: OPENSEARCH_INDEX
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: OPENSEARCH_INDEX
        - name: REDIS_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: REDIS_ENDPOINT
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: rag-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        - name: SERVICE_NAME
          value: "indexing-service"
        - name: SERVICE_VERSION
          value: "1.0.0"
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: indexing-service
  namespace: enterprise-rag
spec:
  selector:
    app: indexing-service
  ports:
  - port: 8080
    targetPort: 8080
  type: ClusterIP